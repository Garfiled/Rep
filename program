ARM的汇编编程，本质上就是针对CPU寄存器的编程；
函数无它，唯指令集合耳；你可以调用一个没有函数体的函数，本质上只是换一个地址开始执行指令！

如果你爱编程，请你爱C语言；
如果你爱C语言，请你爱指针；
如果你爱指针，请你爱指针的指针！

数据结构：是带有结构的数据元素的集合；
所谓结构就是数据元素之间的关系，描述数据元素之间的运算及运算规则；

Json:
跨语言的交换协议


要想学好一门编程语言，最好的办法就是多调试 F10 or F11
写的程序如何在操作系统之上运行起来，操作系统如何为应用程序提供服务


在计算机中，CPU依次读取内存中的指令，通过eip,ebp,esp这些寄存器和内存之间的相互作用，来实现各种函数功能，完成计算机的各种工作

计算机和程序只是一个工具，是一种达到某种目的的方法
学会思考的方式


优秀程序员的价值，不在于其所掌握的几招屠龙之术，而是在细节中见真著。
如果我们可以一次把事情做对，并且做好，在允许的范围内尽可能追求卓越，为什么不去做呢？

完善有多远？我不知道，但我愿意多往前走一步

我的经验是和比你优秀的人一起工作，经常请教比你资深的人，不断挑战过去的自己

发现生活更多的可能性

在让人做某一件事之前，应该先解释为什么要做这件事，以及它的重要性；

一个真正尊重人才的公司会去了解，尊重和发挥新人从外界带来的特殊技能，施展他们特有的长处，而不是一味期望他们向自己学习

编程没有捷径，真正的成长来源于实践、思考和总结

常读源码 Read the source!

没法理解在windows上发生了什么

语言的运行库可以理解为是这种语言的程序和不同操作系统之间的抽象层，它将不同的操作系统API抽象成相同的库函数

程序的局部性原理，当一个程序运行时，在某个时间段内。它只是频繁地用到了一小部分数据
为提高内存的使用率，采用更小粒度的内存分割和映射的方法，分页

线程本身由于创建和切换的开销，采用多线程不会提高程序的执行速度，反而降低速度，但是对于频繁的IO操作的程序，
多线程可以有效的并发

对技术问题寻根究底



进程的引入  多道程序的 －》提高并发能力，充分利用CPU资源
线程的引入  减少程序在并发执行时所付出的时空开销，提高操作系统的并发能力
引入线程后，进程的内涵发生了改变，进程只作为除CPU以外系统资源的分配单元，线程则作为处理机的分配单元。


操作系统的进程调度

和进程相比，多线程是一种节俭的多任务操作方式

开销对比：30倍



链接：http://www.zhihu.com/question/20349497/answer/57576703
来源：知乎
编程，或者更严格的叫程序设计，其本质就是用高度逻辑化的方法去描述一个模型，并以这个模型为基础来解决具体的问题。


著作权归作者所有。
商业转载请联系作者获得授权，非商业转载请注明出处。
作者：Chen Moore
链接：http://www.zhihu.com/question/20349497/answer/57576703
来源：知乎

在编程中所面临的一切问题，将其抽象升华之后最终都可以总结成两部分，即这个模型包含了多少个元结构，
以及是以何种方式来组织这些元结构。所谓的元结构，也可以理解为某种最基本的不可分拆的表达式，或者说基本的运算法则，
或者用更专业的词来说叫指令。而元结构的组织方式则描述了如何这些元结构如何互相连接组合，
并最终一砖一瓦的组成了软件这种摩天大楼。就好象无论多么复杂的数学问题，
最终都可以一步一步的拆分到最基本的运算和公理上一样；对于编程来说，
每一个程序最终都可以被分解成一个一个最基本的指令以及这些指令的契合方式。
通过程序员对于问题的分析和理解，将其拆分成简单的结构并用合适的方法来描述就是，这个行为就可以称之为编程。在这个过程中，
描述的方法使用的是不同的编程语言，因此对于语言的理解本身也会成为编程的一部分，就好象音乐家一定要能熟练掌握至少一种乐器（哪怕是自己的嗓音）一样。














